<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-07-16 at 21:13:45.
 */
include_once 'Mageflow/Connect/controllers/AjaxController.php';

class Mageflow_Connect_AjaxControllerTest extends Zend_Test_PHPUnit_ControllerTestCase
{

    /**
     * @var Mageflow_Connect_AjaxController
     */
    protected $controller;

    /**
     *
     * @var Zend_Controller_Request_HttpTestCase
     */
    protected $request;

    /**
     *
     * @var Zend_Controller_Response_HttpTestCase
     */
    protected $response;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->controller = new Mageflow_Connect_AjaxController($this->request,
            $this->response);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testObject()
    {
        $this->assertInstanceOf('Mageflow_Connect_AjaxController',
            $this->controller);
    }

    /**
     * @covers Mageflow_Connect_AjaxController::indexAction
     * @todo   Implement testIndexAction().
     */
    public function testIndexAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mageflow_Connect_AjaxController::getcompaniesAction
     * @todo   Implement testGetcompaniesAction().
     */
    public function testGetcompaniesAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mageflow_Connect_AjaxController::getprojectsAction
     * @todo   Implement testGetprojectsAction().
     */
    public function testGetprojectsAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mageflow_Connect_AjaxController::registerInstanceAction
     * @todo   Implement testRegisterInstanceAction().
     */
    public function testRegisterInstanceAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mageflow_Connect_AjaxController::getApiClient
     * @todo   Implement testGetApiClient().
     */
    public function testGetApiClient()
    {
        $client = $this->controller->getApiClient();
        $this->assertInstanceOf('\Mageflow\Connect\Model\Api\Mageflow\Client',
            $client);
        $this->assertNotEmpty($client->consumer_key);
        $this->assertNotEmpty($client->consumer_secret);
        $this->assertNotEmpty($client->token);
        $this->assertNotEmpty($client->token_secret);
        $this->assertNotEmpty($client->company);
        $this->assertNotEmpty($client->project);
        $this->assertNotEmpty($client->instance_key);
    }

    public function testCreateOauthAction()
    {
//        $this->dispatch('mageflow_connect/ajax/createoauth');
//        $this->controller->createoauthAction();
    }

    /**
     * Tests forced oauth token creation
     */
    public function testCreateTokenAction()
    {

        $oauthConsumer = Mage::getModel('oauth/consumer')->load('eff44ac8161d0ed8eebc48b79f5ceb95',
            'key');
        $adminUser = Mage::getModel('admin/user')->load(
            'testoauthconsumer1368@eepohs.com', 'username'
        );
        $token = Mage::getModel('oauth/token');
        $token->createRequestToken($oauthConsumer->getId(),
            'http://escape.to.the.void/' . Mage::helper('mageflow_connect')->randomHash() . '/');
        $token->authorize($adminUser->getId(),
            Mage_Oauth_Model_Token::USER_TYPE_ADMIN);
        $token->convertToAccess();
    }

}
